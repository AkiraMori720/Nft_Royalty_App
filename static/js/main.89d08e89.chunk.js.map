{"version":3,"sources":["const.js","utils.js","pages/home.jsx","pages/market.jsx","pages/withdraw.jsx","pages/withdrawRoyalty.jsx","routes.js","App.jsx","reportWebVitals.js","index.jsx"],"names":["NFT_ROYALTY_ADDRESS","NFT_TRADER_ADDRESS","CHARITIES","id","name","address","ZERO_ADDRESS","getRoyaltyPtParam","percent","Math","floor","getEtherPriceToBN","price","ethers","utils","parseUnits","toString","getEtherPriceToStr","formatEther","getAuth","a","window","ethereum","request","method","account","provider","providers","Web3Provider","signer","getSigner","Home","callback","deps","useState","cause","setCause","uri","setURI","setPrice","selfRoyalty","setSelfRoyalty","selfRoyaltyOption","setSelfRoyaltyOption","causeRoyalty","setCauseRoyalty","causeRoyaltyOption","setCauseRoyaltyOption","processing","setProcessing","isValid","useCallback","alert","onMint","nftContract","Contract","NftRoyalty","abi","traderContract","NftTrader","isApprovedForAll","setApprovalForAll","transaction","wait","mint","rsx","event","events","find","e","args","from","to","tokenId","console","log","addTrade","tradeTransaction","className","Container","Form","Group","controlId","Label","Check","type","defaultChecked","label","Control","value","placeholder","onChange","target","map","index","onClick","Select","item","defaultValue","Spinner","animation","Button","variant","Market","nfts","setNfts","isReadyMoralis","setIsReadyMoralis","processingId","setProcessingId","useEffect","Moralis","start","serverUrl","appId","then","Web3API","token","getAllTokenIds","chain","userNFTs","result","royaltyNfts","forEach","userNFT","token_address","toLowerCase","push","tradeNfts","i","length","trades","token_id","trade","seller","getNFT","onBuy","nft","purchase","Card","style","width","Body","Title","Text","Link","token_uri","symbol","Withdraw","onWithdraw","withdraw","destAddr","amount","WithdrawRoyalty","claimRoyalty","AppRoutes","exact","path","element","App","Row","xs","Col","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89d08e89.chunk.js","sourcesContent":["export const NFT_ROYALTY_ADDRESS = \"0xd6770f17e6CE4D90066C3a983be655381Fdcf9C7\";\r\nexport const NFT_TRADER_ADDRESS = \"0x2415487756CA3a346577c71C452d46A5bB1A3913\";\r\n// SIOs\r\nexport const CHARITIES = [{id: 0, name: 'Bbanga Project1', address: '0x54cfF4e34155d2A1D74c2968ca62F557a1C2B709'}];\r\n\r\nexport const MORALIS_SERVER_URL = \"https://tozkleu0ghrx.usemoralis.com:2053/server\";\r\nexport const MORALIS_APP_ID = \"QydZhBHDIQQzZ4mZXqYBLA8QEyoFPbi4eLjlWHFu\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";","import {ethers} from \"ethers\";\r\n\r\nexport function getRoyaltyPtParam(percent){\r\n    return Math.floor(percent * 100);\r\n}\r\n\r\nexport function getEtherPriceToBN(price){\r\n    return ethers.utils.parseUnits(price.toString());\r\n}\r\n\r\nexport function getEtherPriceToStr(price){\r\n    return ethers.utils.formatEther(price);\r\n}\r\n\r\nexport async function getAuth(){\r\n    const [account] = await window.ethereum.request({method: 'eth_requestAccounts'})\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    return {account, signer};\r\n}","import {useCallback, useState} from \"react\";\r\nimport {Container, Spinner, Form, Button} from 'react-bootstrap';\r\nimport '../App.css';\r\nimport {ethers} from \"ethers\";\r\n\r\nimport NftRoyalty from '../abis/NftRoyalty.json';\r\nimport NftTrader from '../abis/NftTrader.json';\r\nimport {CHARITIES, NFT_ROYALTY_ADDRESS, NFT_TRADER_ADDRESS} from \"../const\";\r\nimport {getAuth, getEtherPriceToBN, getRoyaltyPtParam} from \"../utils\";\r\n\r\n// @author Hosokawa-zen\r\nfunction Home(callback, deps) {\r\n    const [cause, setCause] = useState(null);\r\n    const [uri, setURI] = useState('');\r\n    const [price, setPrice] = useState(0);\r\n    const [selfRoyalty, setSelfRoyalty] = useState(0);\r\n    const [selfRoyaltyOption, setSelfRoyaltyOption] = useState(null);\r\n    const [causeRoyalty, setCauseRoyalty] = useState(0);\r\n    const [causeRoyaltyOption, setCauseRoyaltyOption] = useState(null);\r\n    const [processing, setProcessing] = useState(false);\r\n\r\n    // Validation\r\n    const isValid = useCallback(() => {\r\n        if(!uri){\r\n            window.alert('Please input token uri!');\r\n            return false;\r\n        }\r\n        if(!price){\r\n            window.alert('Please input token price!');\r\n            return false;\r\n        }\r\n        if(!selfRoyalty){\r\n            window.alert('Please input your royalty!');\r\n            return false;\r\n        }\r\n        if(!causeRoyalty){\r\n            window.alert('Please input cause royalty!');\r\n            return false;\r\n        }\r\n        if(!cause){\r\n            window.alert('Please select cause!');\r\n            return false;\r\n        }\r\n        return true;\r\n    });\r\n\r\n    // Mint NFT\r\n    const onMint = async () => {\r\n        if (isValid()) {\r\n            if (typeof window.ethereum !== 'undefined') {\r\n                try {\r\n                    setProcessing(true);\r\n                    const {account, signer} = await getAuth();\r\n\r\n                    // Get Contract Object\r\n                    const nftContract = new ethers.Contract(NFT_ROYALTY_ADDRESS, NftRoyalty.abi, signer)\r\n                    const traderContract = new ethers.Contract(NFT_TRADER_ADDRESS, NftTrader.abi, signer)\r\n\r\n                    // Approve\r\n                    let approved = await nftContract.isApprovedForAll(account, NFT_TRADER_ADDRESS);\r\n                    if (!approved) {\r\n                        const transaction = await nftContract.setApprovalForAll(NFT_TRADER_ADDRESS, true);\r\n                        await transaction.wait();\r\n                    }\r\n\r\n                    // Mint\r\n                    let transaction = await nftContract.mint(account, uri, getRoyaltyPtParam(selfRoyalty), getRoyaltyPtParam(causeRoyalty), cause);\r\n                    const rsx = await transaction.wait();\r\n                    const event = rsx.events.find(e => e.event === 'Transfer');\r\n                    if (event) {\r\n                        const {from, to, tokenId} = event.args;\r\n                        console.log('transaction, result', transaction, tokenId);\r\n                        // Set Trade\r\n                        const tradeTransaction = await traderContract.addTrade(getEtherPriceToBN(price), NFT_ROYALTY_ADDRESS, tokenId);\r\n                        await tradeTransaction.wait();\r\n\r\n                        console.log(\"tradeTransaction\", tradeTransaction);\r\n                        window.alert(\"Minted your NFT and added a trade to marketplace\");\r\n                    }\r\n\r\n                    setProcessing(false);\r\n                } catch (e) {\r\n                    console.log('error', e);\r\n                    setProcessing(false);\r\n                }\r\n            } else {\r\n                window.alert('Please install metamask');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (<div className=\"App\">\r\n        <Container>\r\n            <h1> Orica NFT Mint</h1>\r\n            <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"formSaleType\">\r\n                    <Form.Label>Sale Type</Form.Label>\r\n                    <Form.Check\r\n                        type={'radio'}\r\n                        name={'saleType'}\r\n                        defaultChecked={true}\r\n                        label={`Fixed Price`}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formURI\">\r\n                    <Form.Label>Token URI</Form.Label>\r\n                    <Form.Control type=\"text\" value={uri} placeholder=\"Enter Token URI\" onChange={event => setURI(event.target.value)}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formPrice\">\r\n                    <Form.Label>Price (BNB)</Form.Label>\r\n                    <Form.Control type=\"number\" value={price} placeholder=\"Enter Price\" onChange={event => setPrice(event.target.value)}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formCollection\">\r\n                    <Form.Label>Choose collection</Form.Label>\r\n                    <Form.Check\r\n                        type={'radio'}\r\n                        name={'collection'}\r\n                        defaultChecked={true}\r\n                        label={`Orica Single`}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formSelfRoyalty\">\r\n                    <Form.Label>Royalties to you</Form.Label>\r\n                    <Form.Control type=\"number\" value={selfRoyalty} placeholder=\"Enter Royalties\" onChange={event => setSelfRoyalty(event.target.value)}/>\r\n                    {[5, 10, 15].map((value, index) => (\r\n                        <Form.Check\r\n                            key={index}\r\n                            type={'radio'}\r\n                            defaultChecked={value === selfRoyaltyOption}\r\n                            onClick={() => {\r\n                                setSelfRoyalty(value);\r\n                                setSelfRoyaltyOption(value)\r\n                            }}\r\n                            name={'selfRoyaltyOption'}\r\n                            label={`${value}%`}\r\n                        />))}\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formCauseRoyalty\">\r\n                    <Form.Label>Royalties to a good cause</Form.Label>\r\n                    <Form.Control type=\"number\" value={causeRoyalty} placeholder=\"Enter Royalties\" onChange={event => setCauseRoyalty(event.target.value)}/>\r\n                    {[5, 10, 15].map((value, index) => (\r\n                        <Form.Check\r\n                            key={index}\r\n                            type={'radio'}\r\n                            defaultChecked={value === causeRoyaltyOption}\r\n                            onClick={() => {\r\n                                setCauseRoyalty(value);\r\n                                setCauseRoyaltyOption(value)\r\n                            }}\r\n                            name={'causeRoyaltyOption'}\r\n                            label={`${value}%`}\r\n                        />))}\r\n                </Form.Group>\r\n\r\n                <Form.Select aria-label=\"Default select example\" onChange={(event) => setCause(event.target.value)}>\r\n                    <option>Select Cause</option>\r\n                    {\r\n                        CHARITIES.map((item, index) => (\r\n                            <option key={index} value={item.address} defaultValue={cause === item.address}>{item.name}</option>\r\n                        ))\r\n                    }\r\n                </Form.Select>\r\n\r\n                {\r\n                    processing ? <Spinner animation=\"border\" />\r\n                        :\r\n                        <Button variant=\"primary\" type=\"submit\" className=\"mt-4\" onClick={() => onMint()}>\r\n                            Mint\r\n                        </Button>\r\n                }\r\n            </Form>\r\n        </Container>\r\n    </div>);\r\n}\r\n\r\nexport default Home;","import {useEffect, useState} from \"react\";\r\nimport {Container, Button, Card, Spinner} from 'react-bootstrap';\r\nimport {ethers} from \"ethers\";\r\nimport {getAuth, getEtherPriceToStr, getRoyaltyPtParam} from \"../utils\";\r\nimport {MORALIS_APP_ID, MORALIS_SERVER_URL, NFT_ROYALTY_ADDRESS, NFT_TRADER_ADDRESS, ZERO_ADDRESS} from \"../const\";\r\nimport NftTrader from \"../abis/NftTrader.json\";\r\nimport Moralis from \"moralis\";\r\n\r\n// @author Hosokawa-zen\r\nfunction Market() {\r\n    const [nfts, setNfts] = useState([]);\r\n    const [isReadyMoralis, setIsReadyMoralis] = useState(false);\r\n    const [processingId, setProcessingId] = useState(null);\r\n\r\n    useEffect(() => {\r\n        Moralis.start({\r\n            serverUrl: MORALIS_SERVER_URL,\r\n            appId: MORALIS_APP_ID,\r\n        }).then(() => setIsReadyMoralis(true));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        async function getNFT() {\r\n            try{\r\n                if(!isReadyMoralis){\r\n                    setNfts([]);\r\n                    return;\r\n                }\r\n                const {account, signer} = await getAuth();\r\n                const traderContract = new ethers.Contract(NFT_TRADER_ADDRESS, NftTrader.abi, signer)\r\n\r\n                const userNFTs = await Moralis.Web3API.token.getAllTokenIds({\r\n                    address: NFT_ROYALTY_ADDRESS,\r\n                    chain: 'bsc testnet'\r\n                });\r\n\r\n                if (userNFTs && userNFTs.result) {\r\n                    const royaltyNfts = [];\r\n                    userNFTs.result.forEach((userNFT) => {\r\n                        if (userNFT.token_address.toLowerCase() === NFT_ROYALTY_ADDRESS.toLowerCase()) {\r\n                            royaltyNfts.push(userNFT);\r\n                        }\r\n                    });\r\n\r\n                    const tradeNfts = [];\r\n                    for(let i=0; i<royaltyNfts.length; i++){\r\n                        const trade = await traderContract.trades(NFT_ROYALTY_ADDRESS, royaltyNfts[i].token_id);\r\n                        console.log('trade', trade);\r\n                        if(trade && trade.seller !== ZERO_ADDRESS) {\r\n                            tradeNfts.push({\r\n                                ...royaltyNfts[i],\r\n                                seller: trade.seller,\r\n                                price: trade.price\r\n                            });\r\n                        }\r\n                    }\r\n                    setNfts(tradeNfts);\r\n                    console.log('nfts', royaltyNfts, tradeNfts);\r\n                }\r\n            } catch (e) {\r\n                console.log('error', e);\r\n            }\r\n\r\n        }\r\n        getNFT().then();\r\n    }, [isReadyMoralis]);\r\n\r\n    const onBuy = async (nft) => {\r\n        if (typeof window.ethereum !== 'undefined') {\r\n            try {\r\n                setProcessingId(nft.token_id);\r\n                const {account, signer} = await getAuth();\r\n\r\n                const traderContract = new ethers.Contract(NFT_TRADER_ADDRESS, NftTrader.abi, signer);\r\n\r\n                // Mint\r\n                let transaction = await traderContract.purchase(nft.token_address, nft.token_id, {value: nft.price});\r\n                await transaction.wait();\r\n\r\n                window.alert(\"You purchased nft!\");\r\n                setProcessingId(null);\r\n            } catch (e) {\r\n                console.log('error', e);\r\n                setProcessingId(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Container>\r\n                <h1>NFT MarketPlace</h1>\r\n                {\r\n                    !isReadyMoralis && <Spinner animation=\"border\"/>\r\n                }\r\n                {\r\n                 nfts.map(nft =>\r\n                (<Card key={nft.token_id} style={{ width: '18rem' }}>\r\n                    <Card.Body>\r\n                        <Card.Title>Owner: {nft.seller}</Card.Title>\r\n                        <Card.Text>\r\n                            URI : <Card.Link to={nft.token_uri}>{nft.token_uri}</Card.Link>\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                            TOKEN NAME : {nft.name}  TOKEN SYMBOL: {nft.symbol}\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                            TOKEN ID : {nft.token_id}\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                            Price : {getEtherPriceToStr(nft.price)} BNB\r\n                        </Card.Text>\r\n                        {\r\n                            processingId === nft.token_id ?\r\n                                <Spinner animation=\"border\" />\r\n                                :\r\n                            <Button variant=\"primary\" onClick={() => onBuy(nft)}>Buy</Button>\r\n                        }\r\n                    </Card.Body>\r\n                </Card>))\r\n                }\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Market;","import {useState} from \"react\";\r\nimport {Container, Button, Spinner} from 'react-bootstrap';\r\nimport {ethers} from \"ethers\";\r\nimport {getAuth, getEtherPriceToStr} from \"../utils\";\r\nimport {NFT_TRADER_ADDRESS} from \"../const\";\r\nimport NftTrader from \"../abis/NftTrader.json\";\r\n\r\n// @author Hosokawa-zen\r\nfunction Withdraw() {\r\n    const [processing, setProcessing] = useState(false);\r\n\r\n    const onWithdraw = async () => {\r\n        if (typeof window.ethereum !== 'undefined') {\r\n            try {\r\n                setProcessing(true);\r\n                const {account, signer} = await getAuth();\r\n\r\n                const traderContract = new ethers.Contract(NFT_TRADER_ADDRESS, NftTrader.abi, signer);\r\n                // Mint\r\n                let transaction = await traderContract.withdraw(account);\r\n                const rsx = await transaction.wait();\r\n                const event = rsx.events.find(e => e.event === 'Withdraw');\r\n                if (event) {\r\n                    const {destAddr, amount} = event.args;\r\n                    console.log('transaction, result', event.args, destAddr, amount);\r\n                    window.alert(`You withdraw ${getEtherPriceToStr(amount)} BNB!`);\r\n                }\r\n                setProcessing(false);\r\n            } catch (e) {\r\n                console.log('error', e);\r\n                window.alert(`No Balance!`);\r\n                setProcessing(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Container>\r\n                <h1>Withdraw</h1>\r\n                <p>Nft sellers can withdraw their balance</p>\r\n\r\n                {\r\n                    processing ? <Spinner animation=\"border\"/>\r\n                        :\r\n                        <Button className=\"mt-5\" variant=\"primary\" onClick={onWithdraw}>Withdraw</Button>\r\n                }\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Withdraw;","import {useState} from \"react\";\r\nimport {Container, Spinner, Form, Button} from 'react-bootstrap';\r\nimport alert from \"bootstrap/js/src/alert\";\r\nimport {ethers} from \"ethers\";\r\nimport {getAuth, getEtherPriceToStr} from \"../utils\";\r\nimport {NFT_TRADER_ADDRESS} from \"../const\";\r\nimport NftTrader from \"../abis/NftTrader.json\";\r\n\r\n// @author Hosokawa-zen\r\nfunction WithdrawRoyalty() {\r\n    const [processing, setProcessing] = useState(false);\r\n\r\n    const onWithdraw = async () => {\r\n        if (typeof window.ethereum !== 'undefined') {\r\n            try {\r\n                setProcessing(true);\r\n                const {account, signer} = await getAuth();\r\n\r\n                const traderContract = new ethers.Contract(NFT_TRADER_ADDRESS, NftTrader.abi, signer);\r\n                // Mint\r\n                let transaction = await traderContract.claimRoyalty(account);\r\n                const rsx = await transaction.wait();\r\n                const event = rsx.events.find(e => e.event === 'ClaimRoyalty');\r\n                if (event) {\r\n                    const {destAddr, amount} = event.args;\r\n                    console.log('transaction, result', event.args, destAddr, amount);\r\n                    window.alert(`You withdraw ${getEtherPriceToStr(amount)} BNB!`);\r\n                }\r\n                setProcessing(false);\r\n            } catch (e) {\r\n                console.log('error', e);\r\n                window.alert(`No Balance!`);\r\n                setProcessing(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Container>\r\n                <h1>Withdraw Royalty</h1>\r\n                <p>Nft sellers and SIOs can withdraw their royalty balance</p>\r\n                {\r\n                    processing ? <Spinner animation=\"border\"/>\r\n                        :\r\n                        <Button className=\"mt-5\" variant=\"primary\" onClick={onWithdraw}>Withdraw Royalty</Button>\r\n                }\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WithdrawRoyalty;","import React from 'react';\r\nimport {Routes, Route, Link} from 'react-router-dom';\r\n\r\nimport Home from './pages/home';\r\nimport Market from \"./pages/market\";\r\nimport Withdraw from \"./pages/withdraw\";\r\nimport WithdrawRoyalty from \"./pages/withdrawRoyalty\";\r\n\r\nconst AppRoutes = () => (\r\n    <Routes>\r\n        <Route exact path=\"/market\" element={<Market/>}/>\r\n        <Route exact path=\"/withdraw\" element={<Withdraw/>}/>\r\n        <Route exact path=\"/royalty\" element={<WithdrawRoyalty/>}/>\r\n        <Route path=\"/\" element={<Home/>}/>\r\n    </Routes>\r\n);\r\n\r\nexport default AppRoutes;\r\n","import React from 'react';\nimport {BrowserRouter as Router, Link} from 'react-router-dom';\nimport AppRoutes from './routes';\nimport {Col, Row} from \"react-bootstrap\";\n\nconst App = () => {\n    return (\n        <Router>\n            <Row xs=\"auto\" className=\"mx-5 my-4\">\n                <Col><Link to={\"/\"}>Mint</Link></Col>\n                <Col><Link to={\"/market\"}>Market</Link></Col>\n                <Col><Link to={\"/withdraw\"}>Withdraw</Link></Col>\n                <Col><Link to={\"/royalty\"}>WithdrawRoyalty</Link></Col>\n            </Row>\n            <AppRoutes />\n        </Router>\n    );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}